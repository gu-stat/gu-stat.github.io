<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gustavo Varela-Alvarenga on Gustavo Varela-Alvarenga</title>
    <link>/</link>
    <description>Recent content in Gustavo Varela-Alvarenga on Gustavo Varela-Alvarenga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 26 Apr 2019 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create a Map in R with ggplot and transform it into a gif</title>
      <link>/post/forest-map/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 -0400</pubDate>
      
      <guid>/post/forest-map/</guid>
      <description>

&lt;h2 id=&#34;section-1-intro&#34;&gt;Section 1: Intro&lt;/h2&gt;

&lt;p&gt;In March 2019, the Brazilian Annual Land Use and Land Cover Mapping Project
(&lt;a href=&#34;http://mapbiomas.org/&#34; target=&#34;_blank&#34;&gt;MapBiomas&lt;/a&gt;) launched the Mapbiomas v.3.1 data
set on land use and land cover for the period of 1985 to 2017.&lt;/p&gt;

&lt;p&gt;This data set has information about the total area (in hectares) of forest
formations, non-forest natural formations, farming, non-vegetated areas and
water bodies - detailed information about these and their subdivisions can be
found &lt;a href=&#34;https://storage.googleapis.com/mapbiomas/assets/colecao-3-0/mapas-dados/1%20-%20Legenda%20Cole%C3%A7%C3%A3o%203%20-%20Descricao%20Detalhada_ENG.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And even though their website provides tools for anyone to create their own maps, I&amp;rsquo;ve decided to create my own animated map using R and the &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;gifski&lt;/code&gt; packages because I wanted to see the percentage
of a city area that is covered by native vegetation.
I&amp;rsquo;m also using the &lt;code&gt;brazilmaps&lt;/code&gt; package to plot Brazil&amp;rsquo;s map.&lt;/p&gt;

&lt;p&gt;I wanted to focus on Natural Forest Formation data only and see how its total area evolved since 1985.&lt;/p&gt;

&lt;p&gt;This tutorial has 3 sections, besides this introduction. The second section just goes over the packages and fonts that I used and how to download these fonts. In Section 3, I go over the data set and talk about its variables and their definitions. I also go over steps of importing the data set and doing some data manipulation to obtain the information that I want. Section 4 gives you the code for the final map.&lt;/p&gt;

&lt;p&gt;You can download the &lt;code&gt;.R&lt;/code&gt; file with the complete code from my &lt;a href=&#34;https://github.com/gu-stat/forest-area&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;section-2-packages&#34;&gt;Section 2: Packages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll begin by going over the fonts I used and how to install them. I use Windows, so I don&amp;rsquo;t know if the same steps apply to other systems (sorry Mac and Unix users).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using Lato, an open-source font family. So, make sure you download
and install the Lato font before we start or you can just let R use the default system font - you won&amp;rsquo;t have to change the code, you will get some warning messages, but R will still plot the map.&lt;/p&gt;

&lt;p&gt;You can download it from &lt;a href=&#34;http://www.latofonts.com/lato-free-fonts/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing I do is make sure that R can use this font, so I&amp;rsquo;ll use the &lt;code&gt;extrafont&lt;/code&gt; package for that. If it&amp;rsquo;s your first time using these fonts you&amp;rsquo;ll have to run the &lt;code&gt;font_import()&lt;/code&gt; command (this might take a while depending on the number of installed fonts you have, the good thing is that you&amp;rsquo;ll have to run this command only once).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ************************************************************************* ----
# extrafont Package                                                         ----
# ************************************************************************* ----

#install.packages(&amp;quot;extrafont&amp;quot;)

library(&amp;quot;extrafont&amp;quot;)

# ************************************************************************* ----
# Import Font                                                               ----
# ************************************************************************* ----

# Install font Lato

# Run font_import only once:

# font_import()

# Check if Lato was imported
fonts()[grep(&amp;quot;Lato&amp;quot;, fonts())]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Lato Black&amp;quot;    &amp;quot;Lato&amp;quot;          &amp;quot;Lato Hairline&amp;quot; &amp;quot;Lato Light&amp;quot;   
## [5] &amp;quot;Lato Medium&amp;quot;   &amp;quot;Lato Thin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Register the fonts with R

loadfonts(device = &amp;quot;win&amp;quot;)

# ************************************************************************* ----
# Remaining Packages                                                        ----
# ************************************************************************* ----

#install.packages(&amp;quot;openxlsx&amp;quot;)
#install.packages(&amp;quot;tidyverse&amp;quot;)
#install.packages(&amp;quot;brazilmaps&amp;quot;)
#install.packages(&amp;quot;gifski&amp;quot;)

library(&amp;quot;openxlsx&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;brazilmaps&amp;quot;)
library(&amp;quot;gifski&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-3-the-data&#34;&gt;Section 3: The Data&lt;/h2&gt;

&lt;h3 id=&#34;credit-where-credit-is-due&#34;&gt;Credit Where Credit is Due&lt;/h3&gt;

&lt;p&gt;The MapBiomas data are public, open and free through the simple reference of the source:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Project MapBiomas - Collection 3.1 of Brazilian Land Cover &amp;amp; Use Map Series, accessed on 04/24/2019 through the link:
(&lt;a href=&#34;http://mapbiomas.org/pages/estatisticas&amp;quot;&#34; target=&#34;_blank&#34;&gt;http://mapbiomas.org/pages/estatisticas&amp;quot;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&amp;ldquo;MapBiomas Project - is a multi-institutional initiative to generate annual land cover and use maps using automatic classification processes applied to satellite images. The complete description of the project can be found at &lt;a href=&#34;http://mapbiomas.org&#34; target=&#34;_blank&#34;&gt;http://mapbiomas.org&lt;/a&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also using data on the area of the cities in Brazil from IBGE (the Brazilian Institute of Geography and Statistics). Due to changes in the size of the cities over the years, I&amp;rsquo;ve decided to use data from 2016. I was getting some incorrect results using data from 2017 or 2018, like cities with over 100% of their area covered by native vegetation. Clearly, these cities were divided but this wasn&amp;rsquo;t accounted for in MapBiomas&amp;rsquo; data set. No cities with over 100% of their area covered by native vegetation were observed when using 2016 data.&lt;/p&gt;

&lt;p&gt;The code below imports the data sets to R, but if you want you can download the
xlsx files from the official sites by clicking &lt;a href=&#34;https://storage.googleapis.com/mapbiomas/mapbiomas-br/v3-1/planilhas%20de%20estatisticas%203-1/Dados_Cobertura_MapBiomas_3.1_Biomas-UF-Municipios_%20SITE.xlsx&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; for MapBiomas&amp;rsquo; data set and &lt;a href=&#34;ftp://geoftp.ibge.gov.br/organizacao_do_territorio/estrutura_territorial/areas_territoriais/2016/AR_BR_RG_UF_MUN_2016.xls&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; for IBGE&amp;rsquo;s data set.&lt;/p&gt;

&lt;p&gt;For the sake of maintaining my code, I&amp;rsquo;m also uploading the original databases to
my &lt;a href=&#34;https://github.com/gu-stat/forest-area&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt; and that&amp;rsquo;s the
data I&amp;rsquo;ll use in my code below.&lt;/p&gt;

&lt;h3 id=&#34;data-dictionary&#34;&gt;Data Dictionary&lt;/h3&gt;

&lt;p&gt;MapBiomas&amp;rsquo; xlsx file has the following worksheet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INSTRUCTIONS;&lt;/li&gt;
&lt;li&gt;LAND COVER - BIOMAS e UF;&lt;/li&gt;
&lt;li&gt;LAND COVER - MUN_UF;&lt;/li&gt;
&lt;li&gt;CONSULTA BIOMA-UF; and&lt;/li&gt;
&lt;li&gt;CONSULTA MUN-UF.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll use the LAND COVER - MUN_UF worksheet. The variables in this worksheet are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;COD_ESTADO&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;state identifier&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;estado&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;state name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CODIBGE&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;city identifier&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;municipio&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;city name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cod.classe&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;land cover class identifier&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nivel1&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;class level 1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nivel2&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;class level 2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nivel3&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;class level 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1985&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;covered area in hectares(ha) in 1985&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;covered area in hectares(ha) in 2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;IBGE&amp;rsquo;s xlsx file has the following worksheet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AR_BR_MUN_2016;&lt;/li&gt;
&lt;li&gt;AR_BR_UF_2016;&lt;/li&gt;
&lt;li&gt;AR_BR_RG_2016; and&lt;/li&gt;
&lt;li&gt;AR_BR_2016.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll use the AR_BR_MUN_2016 worksheet. The variables in this worksheet are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CD_GCUF&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;state identifier&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NM_UF&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;state name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NM_UF_SIGLA&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;state abbreviation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CD_GCMUN&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;city identifier&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NM_MUN_2016&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;city name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;AR_MUN_2016&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;area in squared km&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I&amp;rsquo;m also creating the data set &lt;code&gt;brazil.map&lt;/code&gt; with the shapefiles
to plot Brazil&amp;rsquo;s map divided by city using the function &lt;code&gt;brazilmaps::get_brmap&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ************************************************************************* ----
# Data Import                                                               ----
# ************************************************************************* ----
# Change number format
options(scipen=10)

# File Path on GitHub
file_path_forest_area = paste0(
  &amp;quot;https://github.com/gu-stat/forest-area/blob/master/&amp;quot;,
  &amp;quot;data/Dados_Cobertura_MapBiomas_3.1_Biomas-UF-Municipios_%20SITE_UNPROTECTED.xlsx&amp;quot;,
  &amp;quot;?raw=true&amp;quot;)

file_path_city_area = paste0(
  &amp;quot;https://github.com/gu-stat/forest-area/blob/master/&amp;quot;,
  &amp;quot;data/AR_BR_RG_UF_MUN_2016.xlsx&amp;quot;,
  &amp;quot;?raw=true&amp;quot;)

# Import
df.original &amp;lt;- openxlsx::read.xlsx(file_path_forest_area, 
                                   sheet = &amp;quot;LAND COVER - MUN_UF&amp;quot;)

df.city.area &amp;lt;- openxlsx::read.xlsx(file_path_city_area, 
                                    sheet = &amp;quot;AR_BR_MUN_2016&amp;quot;)

## \__ Map Data by City ----

brazil.map &amp;lt;- get_brmap(geo = &amp;quot;City&amp;quot;, class = &amp;quot;sf&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;data-manipulation&#34;&gt;Data Manipulation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ************************************************************************* ----
# Data Manipulation                                                         ----
# ************************************************************************* ----

## \__ Transform City Code into Numeric ----

df.city.area2 &amp;lt;-
  df.city.area %&amp;gt;% 
  dplyr::mutate(CODIBGE = as.numeric(CD_GCMUN)) %&amp;gt;% 
  dplyr::select(CODIBGE, AR_MUN_2016)


## \__ Natural Forest Coverage Area Data ----

df.nat.forest &amp;lt;- 
  df.original %&amp;gt;% 
  filter(nivel2 == &amp;quot;Floresta Natural&amp;quot;) %&amp;gt;%
  select(COD_ESTADO, estado, CODIBGE, nivel2, nivel3, 
         paste0(seq(1985, 2017))
  ) %&amp;gt;%
  # SUM THE DIFFERENT SUB-GROUPS OF NATURAL FOREST
  group_by(COD_ESTADO, estado, CODIBGE) %&amp;gt;%
  summarize_at(vars(-nivel2,-nivel3),sum) %&amp;gt;%
  ungroup()

## \__ Join with City Area Data ----

df.nat.forest.AREA &amp;lt;- 
  df.nat.forest %&amp;gt;%
  # ADD TOTAL AREA OF MUNICIPALITY TO DATA SET
  dplyr::left_join(x = ., y = df.city.area2, by = &amp;quot;CODIBGE&amp;quot;) %&amp;gt;%
  # CREATE PERCENTAGES
  ## Divide x/100 to transform from hectares to squared km
  dplyr::mutate_at(.vars=vars(paste0(seq(1985,2017))), 
                   .fun = function(x) round(100*((x/100)/.$AR_MUN_2016),3)
  )
  

# CHECK IF ANYTHING GREATER THAN 100%
greater.1 &amp;lt;- NULL 
for (i in 1985:2017) {
  greater.1 &amp;lt;- append(greater.1, which(df.nat.forest.AREA[,paste0(i)] &amp;gt;= 100))
}

greater.1 &amp;lt;- greater.1 %&amp;gt;% unlist() %&amp;gt;% unique()

## \__ Create Percentages Breaks ----

df.nat.forest.AREA &amp;lt;- 
  df.nat.forest.AREA %&amp;gt;%
  dplyr::mutate_at(.vars=vars(paste0(seq(1985,2017))), 
                   .fun = function(x) cut(x,breaks=c(-Inf, 0, 1, seq(0, 100, 10)[-1]))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-4-the-map&#34;&gt;Section 4: The Map&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ************************************************************************* ----
# Map                                                                       ----
# ************************************************************************* ----

## \__ Function that Joins Map Data by City with Forest Area Data ----

create.map.df &amp;lt;- function(DATA){
  
  map &amp;lt;- join_data(map = brazil.map, data = DATA, by = c(&amp;quot;City&amp;quot; = &amp;quot;CODIBGE&amp;quot;))  
  
  map.ggplot &amp;lt;- as(map, &amp;quot;Spatial&amp;quot;)
  
  map.ggplot@data$id = row.names(map.ggplot@data)
  
  df.map.ggplot &amp;lt;- suppressMessages(ggplot2::fortify(map.ggplot))
  
  df.map.ggplot &amp;lt;- dplyr::left_join(df.map.ggplot, map.ggplot@data, by = &amp;quot;id&amp;quot;)
  
  return(df.map.ggplot)
}

## \____ Map Data for Plot ----

df.map.ggplot &amp;lt;- create.map.df(df.nat.forest.AREA)

## \__ Map Colors ----

# USE https://gka.github.io/palettes TO GET
# COLOR SCALE FROM white TO darkgreen
# THAT&#39;S ALSO SUITABLE TO COLORBLIND PEOPLE WITH 12 BREAKS 
# SAME NUMBER AS THE LEVELS OF cut(x,breaks=c(-Inf, 0, 1, seq(0, 100, 10)[-1]))

map.colors &amp;lt;- c(&#39;#ffffff&#39;,&#39;#eaf1e7&#39;,&#39;#d4e2cf&#39;,&#39;#bfd4b8&#39;,&#39;#abc5a1&#39;,&#39;#96b78a&#39;,
                &#39;#81a974&#39;,&#39;#6c9b5f&#39;,&#39;#588d4a&#39;,&#39;#428034&#39;,&#39;#28711d&#39;,&#39;#006400&#39;)

### \__ Map Labels ----

map.labels &amp;lt;- c(&amp;quot;0&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;10%&amp;quot;, rep(&amp;quot;&amp;quot;,3), &amp;quot;50%&amp;quot;, rep(&amp;quot;&amp;quot;,3), &amp;quot;90%&amp;quot;, &amp;quot;&amp;quot;)

## \__ Create Theme ----

map.theme &amp;lt;-
  theme(
    text = element_text(size = 13, family = &amp;quot;Lato&amp;quot;, color = &amp;quot;#f2efef&amp;quot;),
    axis.text = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    plot.background = element_rect(fill = &amp;quot;#3a3935&amp;quot;, color = NA), 
    panel.background = element_rect(fill = &amp;quot;#3a3935&amp;quot;, color = NA),
    panel.grid = element_blank(),
    plot.margin = margin(t = 0.25,r = 0.25,b = 0.25,l = 0.25,unit = &amp;quot;cm&amp;quot;),
    plot.title = element_text(margin = margin(t = 0.25, unit = &amp;quot;cm&amp;quot;)),
    plot.caption = element_text(size = 10),
    legend.background = element_rect(fill = &amp;quot;#3a3935&amp;quot;, color = &amp;quot;#3a3935&amp;quot;),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 12),
    legend.position = &amp;quot;left&amp;quot;,
    legend.key = element_rect(color = &amp;quot;transparent&amp;quot;),
    legend.key.size = unit(0, units = &amp;quot;mm&amp;quot;),
    legend.key.width = unit(2, units = &amp;quot;mm&amp;quot;)
  )

## \__ Plot Map ----

### \____ Function for GIF ----
plot.map.forest &amp;lt;- function(){
  for (i in 1985:2017) {

    lost.area.year.km2 &amp;lt;-
      round(
        sum(-(df.nat.forest %&amp;gt;% summarize_at(paste0(i),sum)/100),
            df.nat.forest %&amp;gt;% summarize_at(paste0(1985),sum)/100)
        ,2
      )

    lost.area.year.mi2 &amp;lt;- round(lost.area.year.km2/2.59, 2)

    map.forest &amp;lt;-
      # MAP
      ggplot(mapping = aes(x = long, y = lat, group = group)) +
      # MAP WITH TRANSPARENT CITY LINES
      geom_polygon(
        data = df.map.ggplot,
        aes_string(fill = paste0(&amp;quot;X&amp;quot;,i)),
        color = &amp;quot;transparent&amp;quot;
      ) +
      # LEGEND
      scale_fill_manual(
        values = map.colors,
        drop = FALSE,
        na.value = &amp;quot;black&amp;quot;,
        na.translate = FALSE,
        name = &amp;quot;&amp;quot;,
        label = map.labels,
        guide = guide_legend(
          direction = &amp;quot;vertical&amp;quot;,
          ncol = 1,
          reverse = TRUE,
          label.vjust = 2.5
        )
      ) +
      # MAP LIMITS
      xlim(range(df.map.ggplot$long)) +
      ylim(range(df.map.ggplot$lat)) +
      coord_map() +
      # ADD TITLE AND CAPTIONS
      labs(
        title = &amp;quot;Percentage of City Area Covered By Native Vegetation, Brazil.&amp;quot;,
        caption = paste0(&amp;quot;Map: Gustavo Varela-Alvarenga - ogustavo.com \n \n &amp;quot;,
                         &amp;quot;Data: MapBiomas v.3.1 - mapbiomas.org &amp;amp; &amp;quot;,
                         &amp;quot;IBGE - www.ibge.gov.br &amp;quot;)
      ) +
      # ADD THEME
      map.theme +
      # ADD ANNOTATIONS
      ## WORD YEAR
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -44.1, y = 2.4, size = 4, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label = &amp;quot;year&amp;quot;, angle = 90
      ) +
      ## ACTUAL YEAR
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -40, y = 2.5, size = 10, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label = paste0(i)
      ) +
      ## TITLE - TABLE ON THE LEFT
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -68.5, y = -26, size = 4, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =
          paste0(&amp;quot;Total Area of Native \n&amp;quot;, &amp;quot;Vegetation Lost Since 1985&amp;quot;)
      ) +
      ## LINE BELOW TITLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -64.5, xend = -72.5, y = -28, yend = -28,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      ) +
      ## VALUES IN KM2 WITH . TO MARK THOUSANDS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -68.5, y = -29, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =
          ifelse(lost.area.year.km2 == 0, &amp;quot;0&amp;quot;,
                 paste0(prettyNum(round(lost.area.year.km2, 0),
                                  big.mark=&amp;quot;.&amp;quot;, decimal.mark = &amp;quot;,&amp;quot;),
                        &amp;quot; sq km&amp;quot;)
          )
      ) +
      ## VALUES IN MI2 WITH , TO MARK THOUSANDS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -68.5, y = -31, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =
          ifelse(lost.area.year.mi2 == 0, &amp;quot;0&amp;quot;,
                 paste0(prettyNum(round(lost.area.year.mi2, 0), big.mark=&amp;quot;,&amp;quot;),
                        &amp;quot; sq miles&amp;quot;)
          )
      ) +
      ## LINE BELOW TABLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -64.5, xend = -72.5, y = -32, yend = -32,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      ) +
      ## TITLE - TABLE ON THE RIGHT
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -39, y = -26, size = 4, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =  paste0(&amp;quot;Lost Area as \n&amp;quot;, &amp;quot;% of the Area of&amp;quot;)
      ) +
      ## LINE BELOW TITLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -35, xend = -43, y = -28, yend = -28,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      ) +
      ## ADD WORD TEXAS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -41, y = -29, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label =  &amp;quot;Texas       : &amp;quot;
      ) +
      ## ADD VALUE FOR TEXAS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -34, y = -29, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 1,
        label =
          ifelse(
            lost.area.year.km2 == 0, &amp;quot;0%&amp;quot;,
            paste0(round(lost.area.year.km2/696241, 2) * 100, &amp;quot;%&amp;quot;)
          )
      ) +
      ## ADD WORD GERMANY
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -41, y = -31, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label =  &amp;quot;Germany : &amp;quot;
      ) +
      ## ADD VALUE FOR GERMANY
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -34, y = -31, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 1,
        label =
          ifelse(
            lost.area.year.km2 == 0, &amp;quot;0%&amp;quot;,
            paste0(round(lost.area.year.km2/357386, 2) * 100, &amp;quot;%&amp;quot;)
          )
      ) +
      ## LINE BELOW TABLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -35, xend = -43, y = -32, yend = -32,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      )

    print(map.forest)

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### \____ Create GIF ----
### Be mindful that this will save a gif file named forest_animation.gif into
### your working directory

gif_file &amp;lt;-
  gifski::save_gif(
    expr = plot.map.forest(),
    gif_file = &amp;quot;forest_animation.gif&amp;quot;,
    delay = 0.75, width = 738, height = 788, res = 100
  )

utils::browseURL(gif_file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gu-stat/forest-area/master/gif/forest_animation.gif&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If you want you can you use the code below to get high-quality static images of the maps. Be mindful that this will save the plots into your working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#install.packages(&amp;quot;Cairo&amp;quot;)
library(&amp;quot;Cairo&amp;quot;)

for (i in 1985:2017) {

    lost.area.year.km2 &amp;lt;-
      round(
        sum(-(df.nat.forest %&amp;gt;% summarize_at(paste0(i),sum)/100),
            df.nat.forest %&amp;gt;% summarize_at(paste0(1985),sum)/100)
        ,2
      )

    lost.area.year.mi2 &amp;lt;- round(lost.area.year.km2/2.59, 2)

    map.forest &amp;lt;-
      # MAP
      ggplot(mapping = aes(x = long, y = lat, group = group)) +
      # MAP WITH TRANSPARENT CITY LINES
      geom_polygon(
        data = df.map.ggplot,
        aes_string(fill = paste0(&amp;quot;X&amp;quot;,i)),
        color = &amp;quot;transparent&amp;quot;
      ) +
      # LEGEND
      scale_fill_manual(
        values = map.colors,
        drop = FALSE,
        na.value = &amp;quot;black&amp;quot;,
        na.translate = FALSE,
        name = &amp;quot;&amp;quot;,
        label = map.labels,
        guide = guide_legend(
          direction = &amp;quot;vertical&amp;quot;,
          ncol = 1,
          reverse = TRUE,
          label.vjust = 2.5
        )
      ) +
      # MAP LIMITS
      xlim(range(df.map.ggplot$long)) +
      ylim(range(df.map.ggplot$lat)) +
      coord_map() +
      # ADD TITLE AND CAPTIONS
      labs(
        title = &amp;quot;Percentage of City Area Covered By Native Vegetation, Brazil.&amp;quot;,
        caption = paste0(&amp;quot;Map: Gustavo Varela-Alvarenga - ogustavo.com \n \n &amp;quot;,
                         &amp;quot;Data: MapBiomas v.3.1 - mapbiomas.org &amp;amp; &amp;quot;,
                         &amp;quot;IBGE - www.ibge.gov.br &amp;quot;)
      ) +
      # ADD THEME
      map.theme +
      # ADD ANNOTATIONS
      ## WORD YEAR
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -44.1, y = 2.4, size = 4, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label = &amp;quot;year&amp;quot;, angle = 90
      ) +
      ## ACTUAL YEAR
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -40, y = 2.5, size = 10, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label = paste0(i)
      ) +
      ## TITLE - TABLE ON THE LEFT
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -68.5, y = -26, size = 4, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =
          paste0(&amp;quot;Total Area of Native \n&amp;quot;, &amp;quot;Vegetation Lost Since 1985&amp;quot;)
      ) +
      ## LINE BELOW TITLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -64.5, xend = -72.5, y = -28, yend = -28,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      ) +
      ## VALUES IN KM2 WITH . TO MARK THOUSANDS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -68.5, y = -29, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =
          ifelse(lost.area.year.km2 == 0, &amp;quot;0&amp;quot;,
                 paste0(prettyNum(round(lost.area.year.km2, 0),
                                  big.mark=&amp;quot;.&amp;quot;, decimal.mark = &amp;quot;,&amp;quot;),
                        &amp;quot; sq km&amp;quot;)
          )
      ) +
      ## VALUES IN MI2 WITH , TO MARK THOUSANDS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -68.5, y = -31, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =
          ifelse(lost.area.year.mi2 == 0, &amp;quot;0&amp;quot;,
                 paste0(prettyNum(round(lost.area.year.mi2, 0), big.mark=&amp;quot;,&amp;quot;),
                        &amp;quot; sq miles&amp;quot;)
          )
      ) +
      ## LINE BELOW TABLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -64.5, xend = -72.5, y = -32, yend = -32,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      ) +
      ## TITLE - TABLE ON THE RIGHT
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -39, y = -26, size = 4, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 0.5,
        label =  paste0(&amp;quot;Lost Area as \n&amp;quot;, &amp;quot;% of the Area of&amp;quot;)
      ) +
      ## LINE BELOW TITLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -35, xend = -43, y = -28, yend = -28,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      ) +
      ## ADD WORD TEXAS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -41, y = -29, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label =  &amp;quot;Texas       : &amp;quot;
      ) +
      ## ADD VALUE FOR TEXAS
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -34, y = -29, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 1,
        label =
          ifelse(
            lost.area.year.km2 == 0, &amp;quot;0%&amp;quot;,
            paste0(round(lost.area.year.km2/696241, 2) * 100, &amp;quot;%&amp;quot;)
          )
      ) +
      ## ADD WORD GERMANY
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -41, y = -31, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, label =  &amp;quot;Germany : &amp;quot;
      ) +
      ## ADD VALUE FOR GERMANY
      annotate(
        geom = &amp;quot;text&amp;quot;, x = -34, y = -31, size = 4.5, family = &amp;quot;Lato&amp;quot;,
        color = &amp;quot;#f2efef&amp;quot;, hjust = 1,
        label =
          ifelse(
            lost.area.year.km2 == 0, &amp;quot;0%&amp;quot;,
            paste0(round(lost.area.year.km2/357386, 2) * 100, &amp;quot;%&amp;quot;)
          )
      ) +
      ## LINE BELOW TABLE
      annotate(
        geom = &amp;quot;segment&amp;quot;, x = -35, xend = -43, y = -32, yend = -32,
        linetype = &amp;quot;solid&amp;quot;, color = &amp;quot;#f2efef&amp;quot;
      )

    ### Be mindful that this will save several png files named Y*.png, 
    ### where * is the year, into your working directory
    
    ggsave(
      paste0(&amp;quot;Y&amp;quot;,i,&amp;quot;.png&amp;quot;), device=&amp;quot;png&amp;quot;, type=&amp;quot;cairo&amp;quot;, 
      width = 7, height = 7
    )

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gu-stat/forest-area/master/gif/Y1985.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gu-stat/forest-area/master/gif/Y2017.png&#34;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Dumbbell Plot using ggplot</title>
      <link>/post/dotplot-ggplot/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/post/dotplot-ggplot/</guid>
      <description>&lt;p&gt;A friend of mine asked if I could replicate the following plot:
&lt;img src=&#34;dotplot_original.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;First, we load the packages and set the colors to be the same ones from the original plot (or at least, as close as possible).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ************************************************************************* ----
# Packages                                                                  ----
# ************************************************************************* ----

#install.packages(&amp;quot;tidyverse&amp;quot;)

library(&amp;quot;tidyverse&amp;quot;)

# ************************************************************************* ----
# Colors - From the original plot                                           ----
# ************************************************************************* ----

orange &amp;lt;- &amp;quot;#e8ab5f&amp;quot;
green &amp;lt;- &amp;quot;#a1ad62&amp;quot;

background_diff &amp;lt;- &amp;quot;#eef0e2&amp;quot;

gray &amp;lt;- &amp;quot;#bbbbbb&amp;quot;
light_gray &amp;lt;- &amp;quot;#f4f4f4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need to recreate the data. I did that as if the data were organized as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#        Country Ages_35_plus Ages_18_34
# 1      Germany         0.39       0.81
# 2       France         0.42       0.83
# 3      Vietnam         0.49       0.86
# 4        Japan         0.43       0.78
# 5       Poland         0.51       0.86
# 6      Lebanon         0.57       0.90
# 7    Australia         0.60       0.91
# 8  South Korea         0.45       0.75
# 9       Canada         0.65       0.93
# 10       Spain         0.57       0.85
# 11       Italy         0.57       0.83
# 12        Peru         0.65       0.91
# 13        U.S.         0.63       0.89
# 14          UK         0.59       0.84
# 15      Mexico         0.67       0.90
# 16       Chile         0.75       0.96
# 17       China         0.52       0.73
# 18       India         0.48       0.69
# 19      Pais A         0.60       0.40
# 20      Pais B         0.50       0.50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve included &lt;code&gt;Pais A&lt;/code&gt; and &lt;code&gt;Pais B&lt;/code&gt; so that I have one country with a negative difference, and another one
with a difference of zero.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ************************************************************************* ----
# Data for Dotplot                                                          ----
# ************************************************************************* ----

original_df &amp;lt;- 
  data.frame(
    Country = c(&amp;quot;Germany&amp;quot;, &amp;quot;France&amp;quot;, &amp;quot;Vietnam&amp;quot;, &amp;quot;Japan&amp;quot;,
                &amp;quot;Poland&amp;quot;, &amp;quot;Lebanon&amp;quot;, &amp;quot;Australia&amp;quot;, 
                &amp;quot;South Korea&amp;quot;, &amp;quot;Canada&amp;quot;, &amp;quot;Spain&amp;quot;, &amp;quot;Italy&amp;quot;, &amp;quot;Peru&amp;quot;, &amp;quot;U.S.&amp;quot;,
                &amp;quot;UK&amp;quot;, &amp;quot;Mexico&amp;quot;, &amp;quot;Chile&amp;quot;, &amp;quot;China&amp;quot;, &amp;quot;India&amp;quot;, 
                &amp;quot;Pais A&amp;quot;, &amp;quot;Pais B&amp;quot;
                ),
    Ages_35_plus = c(0.39, 0.42, 0.49, 0.43, 
                     0.51, 0.57, 0.60,
                     0.45, 0.65, 0.57, 0.57, 0.65, 0.63,
                     0.59, 0.67, 0.75, 0.52, 0.48,
                     0.6, 0.5
                     ),
    Ages_18_34 = c(0.81, 0.83, 0.86, 0.78, 0.86, 0.90, 0.91,
                   0.75, 0.93, 0.85, 0.83, 0.91, 0.89,
                   0.84, 0.90, 0.96, 0.73, 0.69,
                   0.4, 0.5 
                   )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given that, I needed to do 5 things before I started:&lt;/p&gt;

&lt;p&gt;1) Insert a line break in &lt;code&gt;South Korea&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Calculate the age differences&lt;/p&gt;

&lt;p&gt;3) Sort countries by their age differences&lt;/p&gt;

&lt;p&gt;4) Set country names as factors so that we can plot it in the correct order.&lt;/p&gt;

&lt;p&gt;5) Gather columns into key-value pairs (age groups).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## \__Line Break

original_df_v2 &amp;lt;- 
  original_df %&amp;gt;%
  mutate(
    Country = ifelse(
      Country == &amp;quot;South Korea&amp;quot;, 
      # Value_if_True:
      &amp;quot;South \n Korea&amp;quot;, 
      # Value_if_False:
      as.character(Country))
  )

# _________________________________________________________________________ ====

## \__Calculate the age differences

base_diff &amp;lt;- 
  original_df_v2 %&amp;gt;%
  mutate(
    Diferenca = Ages_18_34-Ages_35_plus
  ) %&amp;gt;%
  Sort (descending), but that&#39;s OK as ggplot inverts the order
  arrange(Diferenca, desc(Country)) %&amp;gt;%
  # Create factors from the names of the ordered countries
  mutate(
    Country.fact = factor(Country, levels = unique(Country))
  )

# _________________________________________________________________________ ====

## \__Gather columns

df_diff_gather_age &amp;lt;- 
  base_diff %&amp;gt;%
  gather(
    # Group Name 
    key = Age_Group,
    # Name of the Variable to input the percentages of Age
    value = Age_Percent,
    # Age variables 
    Ages_35_plus, Ages_18_34
  ) %&amp;gt;%
  # Reorder the variables in the database
  select(Country, Country.fact, Age_Group, Age_Percent, Diferenca) 

#___________________________________________________________________________####

# ************************************************************************* ----
# Dot Plot                                                                  ----
# ************************************************************************* ----
p&amp;lt;-
ggplot(
  data = df_diff_gather_age,
  mapping = aes(
    # Y Axis
    y=Country.fact, 
    # X Axis
    x=Age_Percent, 
    # Groups with different colors
    # If difference is zero, put it into a third group
    color = ifelse(Diferenca == 0, &amp;quot;zero&amp;quot;, Age_Group))
) + 
  # Plot lines between points, by Country
  geom_line(
    mapping = aes(group = Country),
    color = gray,
    size = 2.5
  ) +
  geom_point(
    # Dot size
    size=4,
    # dot type. Important to be number 19, otherwise we cannot plot the dots 
    # with the colors for different groups
    pch = 19
  ) + 
  # Add % for each point
  geom_text(
    # Font size
    size = 4,
    # Set text a little below the dots
    nudge_y = -0.35,
    mapping = 
      aes(
        label = 
          # If country is Germany (the first one), plot numbers with %
          ifelse(Country == &amp;quot;Germany&amp;quot;,
                 # Value_if_True:
                 paste0(as.character(round(Age_Percent*100,0)),&amp;quot;%&amp;quot;),
                 # Value_if_False
                 paste0(as.character(round(Age_Percent*100,0)))
                 ),
        color = ifelse(Diferenca == 0, &amp;quot;zero&amp;quot;, Age_Group)

      )
  ) + 
  # Add &amp;quot;Legend&amp;quot; above Germany (the first one)
  geom_text(
    # Font size
    size = 4,
    # Bold face
    fontface = &amp;quot;bold&amp;quot;,
    # Set text a little above the dots
    nudge_y = 0.6,
    mapping = 
      aes(
        label = 
          # If Country is Germany, plot legend
          ifelse(Country == &amp;quot;Germany&amp;quot;,
                 # Value_if_True:
                 ifelse(Age_Group == &amp;quot;Ages_35_plus&amp;quot;,
                        # Value_if_True:
                        &amp;quot;Ages 35+&amp;quot;,
                        # Value_if_False:
                        &amp;quot;Ages 18-34&amp;quot;
                        ),
                 # Value_if_False
                 &amp;quot;&amp;quot;
          ),
        color = ifelse(Diferenca == 0, &amp;quot;zero&amp;quot;, Age_Group)
      )
  ) +
  # Change dot colors
  scale_color_manual(
    values = c(orange, green, &amp;quot;gray&amp;quot;)
  ) +
  # Change scale x axis
  scale_x_continuous(
    # Set limits to 0 and 1.2 (we won&#39;t set it to 1 because we neeed some space
    # after 1 to place the values of the differences)
    limits = c(0,1.2),
    # Show tick marks at every 25%
    breaks = seq(0,1,.25),
    # Change scale to percent
    labels = scales::percent
  ) +
  # Expand y axis scale so that the legend can fit
  scale_y_discrete(
    expand = expand_scale(add=c(0.65,1))
  ) +
  # Add white rectangle to set the area where the values of the differences will
  # be
  geom_rect(
    mapping = aes(xmin = 1.01, xmax = Inf , ymin = -Inf, ymax = Inf),
    fill = &amp;quot;white&amp;quot;,
    color = &amp;quot;white&amp;quot;
  ) +
  # Add rectangle with correct banground color for the differences
  geom_rect(
    mapping = aes(xmin = 1.05, xmax = 1.15 , ymin = -Inf, ymax = Inf),
    fill = background_diff,
    color = background_diff
  ) +
  # Add Differences values
  geom_text(
    # Bold face
    fontface = &amp;quot;bold&amp;quot;,
    # Font size
    size = 4,
    # Font Color
    colour = &amp;quot;black&amp;quot;,
    # Position
    mapping = 
      aes(
        x = 1.1,
        y = Country,
        label = 
          # To avoid duplicate values, plot empty text for the first group and
          # plot the difference only for the Ages_18_34 group.
          ifelse(Age_Group == &amp;quot;Ages_35_plus&amp;quot;,
                 # Value_if_True
                 &amp;quot;&amp;quot;,
                 #Value_if_False
                 # If the difference is equal to zero, do not put any signal. 
                 # Otherwise, if Positive, put the + sign on the front.
                 ifelse(Diferenca == 0,
                        # Value_if_True:
                        paste0(as.character(round(Diferenca*100,0))),
                        # Value_if_False
                        ifelse(Diferenca &amp;gt; 0, 
                               # Value_if_True
                               paste0(&amp;quot;+&amp;quot;,as.character(round(Diferenca*100,0))),
                               # Value_if_False
                               paste0(as.character(round(Diferenca*100,0)))
                        )
                 )
              )
      )
  ) +
  # Insert Title of Differences
  geom_text(
    # Bold face
    fontface = &amp;quot;bold&amp;quot;,
    # Font size
    size = 4,
    # Cor
    colour = &amp;quot;gray&amp;quot;,
    # Set text a little above the dots
    nudge_y = 0.6,
    # Position
    mapping = 
      aes(
        x = 1.1,
        y = Country,
        label = 
          # If Country is Germany, plot values
          ifelse(Country == &amp;quot;Germany&amp;quot;,
                 # Value_if_True
                 &amp;quot;DIFF&amp;quot;,
                 #Value_if_False
                 &amp;quot;&amp;quot;
          )
      )
  ) +
  # Plot Title and Axis Labels
  labs(
    title = &amp;quot;The social media age gap&amp;quot;,
    subtitle = paste0(
      &amp;quot;Adult internet users or reported smartphone owners who \n&amp;quot;,
      &amp;quot;use social networking sites&amp;quot;
      ),
    x = &amp;quot;&amp;quot;,
    y = &amp;quot;&amp;quot;
    ) +
  # Change background, General font size, and other things
  theme(
    # Change font color and text for all text outside geom_text
    text = element_text(color = &amp;quot;#4e4d47&amp;quot;, size = 14),
    
    # Country names in bold face
    axis.text.y = element_text(face = &amp;quot;bold&amp;quot;),
    
    # Add space between x axis text and plot 
    axis.text.x = element_text(vjust = -0.75),
    
    # Do not show tick marks
    axis.ticks = element_blank(),
    
    # Delete original legend (keep only the one we created)
    legend.position = &amp;quot;none&amp;quot;,
    
    # White background
    panel.background = element_blank(),
    
    # Country (y Axis) Lines
    panel.grid.major.y = element_line(colour = light_gray, size = 1),
    
    # Change Title Font
    plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = 16),
    
    # Change Subtitle Font and add some margin
    plot.subtitle = element_text(face = &amp;quot;italic&amp;quot;, size = 12,
                                 margin = margin(b = 0.5, unit = &amp;quot;cm&amp;quot;))
  ) 

p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the final plot:
&lt;img src=&#34;dotplot_final.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Waterfall Chart using ggplot</title>
      <link>/post/waterfall-ggplot/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>/post/waterfall-ggplot/</guid>
      <description>&lt;p&gt;This plot was created in response to &lt;a href=&#34;https://stackoverflow.com/questions/48259930/how-to-create-a-stacked-waterfall-chart-in-r/52565089#52565089&#34; target=&#34;_blank&#34;&gt;this question on StackOverflow&lt;/a&gt;. The objective is to replicate the following plot:
&lt;img src=&#34;waterfall_original.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The trick to plot waterfall charts with &lt;code&gt;ggplot2&lt;/code&gt; is to create a data set with the groups (x values - I&amp;rsquo;m calling this in my code as &lt;code&gt;x.axis.Var&lt;/code&gt;) in the exact order you want to plot. After that, you need to get the start and end points of the bars for each category (categories in your legend - &lt;code&gt;cat.Var&lt;/code&gt;) within the groups. Then, you create another group with the &lt;em&gt;totals by category&lt;/em&gt;. You&amp;rsquo;ll also need a numeric index for the groups to manipulate the bars. Finally, get a column with the &lt;em&gt;total by group&lt;/em&gt; for the numbers above the bars.&lt;/p&gt;

&lt;p&gt;Suppose your dataframe looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- 
  data.frame(
    x.axis.Var = rep(c(&amp;quot;Widgets&amp;quot;, &amp;quot;Gridgets&amp;quot;, &amp;quot;Groms&amp;quot;, &amp;quot;Wobs&amp;quot;), 3),
    cat.Var = rep(c(&amp;quot;High End&amp;quot;, &amp;quot;Mid Range&amp;quot;, &amp;quot;Low End&amp;quot;), each = 4),
    values = c(600, 500, 300, 200, # high end
               300, 200, 300, 250, # mid range
               100, 80, 200, 150   # low end
               )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;   x.axis.Var   cat.Var values
1     Widgets  High End    600
2    Gridgets  High End    500
3       Groms  High End    300
4        Wobs  High End    200
5     Widgets Mid Range    300
6    Gridgets Mid Range    200
7       Groms Mid Range    300
8        Wobs Mid Range    250
9     Widgets   Low End    100
10   Gridgets   Low End     80
11      Groms   Low End    200
12       Wobs   Low End    150
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow the steps below to get a new data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;tidyverse&#39;)

df.tmp &amp;lt;- df %&amp;gt;%
  # \_Set the factor levels in the order you want ----
  mutate(
    x.axis.Var = factor(x.axis.Var,
                        levels = c(&amp;quot;Widgets&amp;quot;, &amp;quot;Gridgets&amp;quot;, &amp;quot;Groms&amp;quot;, &amp;quot;Wobs&amp;quot;)),
    cat.Var = factor(cat.Var,
                        levels = c(&amp;quot;Low End&amp;quot;, &amp;quot;Mid Range&amp;quot;, &amp;quot;High End&amp;quot;))
  ) %&amp;gt;%
  # \_Sort by Group and Category ----
  arrange(x.axis.Var, desc(cat.Var)) %&amp;gt;%
  # \_Get the start and end points of the bars ----
  mutate(end.Bar = cumsum(values),
         start.Bar = c(0, head(end.Bar, -1))) %&amp;gt;%
  # \_Add a new Group called &#39;Total&#39; with total by category ----
  rbind(
    df %&amp;gt;%
      # \___Sum by Categories ----
      group_by(cat.Var) %&amp;gt;% 
      summarise(values = sum(values)) %&amp;gt;%
      # \___Create new Group: &#39;Total&#39; ----
      mutate(
        x.axis.Var = &amp;quot;Total&amp;quot;,
        cat.Var = factor(cat.Var,
                         levels = c(&amp;quot;Low End&amp;quot;, &amp;quot;Mid Range&amp;quot;, &amp;quot;High End&amp;quot;))
      ) %&amp;gt;%
      # \___Sort by Group and Category ----
      arrange(x.axis.Var, desc(cat.Var)) %&amp;gt;%
      # \___Get the start and end points of the bars ----
      mutate(end.Bar = cumsum(values),
             start.Bar = c(0, head(end.Bar, -1))) %&amp;gt;%
      # \___Put variables in the same order ----
      select(names(df),end.Bar,start.Bar)
  ) %&amp;gt;%
  # \_Get numeric index for the groups ----
  mutate(group.id = group_indices(., x.axis.Var)) %&amp;gt;%
  # \_Create new variable with total by group ----
  group_by(x.axis.Var) %&amp;gt;%
  mutate(total.by.x = sum(values)) %&amp;gt;%
  # \_Order the columns ----
  select(x.axis.Var, cat.Var, group.id, start.Bar, values, end.Bar, total.by.x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This yields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x.axis.Var cat.Var   group.id start.Bar values end.Bar total.by.x
   &amp;lt;fct&amp;gt;      &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
 1 Widgets    High End         1         0    600     600       1000
 2 Widgets    Mid Range        1       600    300     900       1000
 3 Widgets    Low End          1       900    100    1000       1000
 4 Gridgets   High End         2      1000    500    1500        780
 5 Gridgets   Mid Range        2      1500    200    1700        780
 6 Gridgets   Low End          2      1700     80    1780        780
 7 Groms      High End         3      1780    300    2080        800
 8 Groms      Mid Range        3      2080    300    2380        800
 9 Groms      Low End          3      2380    200    2580        800
10 Wobs       High End         4      2580    200    2780        600
11 Wobs       Mid Range        4      2780    250    3030        600
12 Wobs       Low End          4      3030    150    3180        600
13 Total      High End         5         0   1600    1600       3180
14 Total      Mid Range        5      1600   1050    2650       3180
15 Total      Low End          5      2650    530    3180       3180
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, I can use the following code to get the plot that I want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(df.tmp, aes(x = group.id, fill = cat.Var)) + 
  # \_Simple Waterfall Chart ----
  geom_rect(aes(x = group.id,
                xmin = group.id - 0.25, # control bar gap width
                xmax = group.id + 0.25, 
                ymin = end.Bar,
                ymax = start.Bar),
            color=&amp;quot;black&amp;quot;, 
            alpha=0.95) + 
  # \_Lines Between Bars ----
  geom_segment(aes(x=ifelse(group.id == last(group.id),
                            last(group.id),
                            group.id+0.25), 
                   xend=ifelse(group.id == last(group.id),
                               last(group.id),
                               group.id+0.75), 
                   y=ifelse(cat.Var == &amp;quot;Low End&amp;quot;,
                            end.Bar,
                            # these will be removed once we set the y limits
                            max(end.Bar)*2), 
                   yend=ifelse(cat.Var == &amp;quot;Low End&amp;quot;,
                               end.Bar,
                               # these will be removed once we set the y limits
                               max(end.Bar)*2)), 
               colour=&amp;quot;black&amp;quot;) +
  # \_Numbers inside bars (each category) ----
  geom_text(
    mapping = 
      aes(
        label = ifelse(values &amp;lt; 150, 
                       &amp;quot;&amp;quot;,
                       ifelse(nchar(values) == 3,
                              as.character(values),
                              sub(&amp;quot;(.{1})(.*)&amp;quot;, &amp;quot;\\1.\\2&amp;quot;, 
                                  as.character(values)
                              )
                            )
                       ),
        y = rowSums(cbind(start.Bar,values/2))
        ),
    color = &amp;quot;white&amp;quot;,
    fontface = &amp;quot;bold&amp;quot;
    ) + 
  # \_Total for each category above bars ----
  geom_text(
    mapping = 
      aes(
        label = ifelse(cat.Var != &amp;quot;Low End&amp;quot;, 
                       &amp;quot;&amp;quot;,
                       ifelse(nchar(total.by.x) == 3,
                              as.character(total.by.x),
                              sub(&amp;quot;(.{1})(.*)&amp;quot;, &amp;quot;\\1.\\2&amp;quot;, 
                                  as.character(total.by.x)
                                )
                            )
                      ),
        y = end.Bar+200
      ),
    color = &amp;quot;#4e4d47&amp;quot;,
    fontface = &amp;quot;bold&amp;quot;
  ) + 
  # \_Change colors ----
  scale_fill_manual(values=c(&#39;#c8f464&#39;,&#39;#ff6969&#39;,&#39;#55646e&#39;)) +
  # \_Change y axis to same scale as original ----
  scale_y_continuous(
    expand=c(0,0),
    limits = c(0, 3500),
    breaks = seq(0, 3500, 500),
    labels = ifelse(nchar(seq(0, 3500, 500)) &amp;lt; 4,
                    as.character(seq(0, 3500, 500)),
                    sub(&amp;quot;(.{1})(.*)&amp;quot;, &amp;quot;\\1.\\2&amp;quot;, 
                        as.character(seq(0, 3500, 500))
                    )
    )
  ) +
  # \_Add tick marks on x axis to look like the original plot ----
  scale_x_continuous(
    expand=c(0,0),
    limits = c(min(df.tmp$group.id)-0.5,max(df.tmp$group.id)+0.5),
    breaks = c(min(df.tmp$group.id)-0.5,
               unique(df.tmp$group.id), 
               unique(df.tmp$group.id) + 0.5
               ),
    labels = 
      c(&amp;quot;&amp;quot;, 
        as.character(unique(df.tmp$x.axis.Var)), 
        rep(c(&amp;quot;&amp;quot;), length(unique(df.tmp$x.axis.Var)))
      )
  ) +
  # \_Theme options to make it look like the original plot ----
  theme(
    text = element_text(size = 14, color = &amp;quot;#4e4d47&amp;quot;),
    axis.text = element_text(size = 10, color = &amp;quot;#4e4d47&amp;quot;, face = &amp;quot;bold&amp;quot;),
    axis.text.y = element_text(margin = margin(r = 0.3, unit = &amp;quot;cm&amp;quot;)),
    axis.ticks.x =
      element_line(color =
                     c(&amp;quot;black&amp;quot;,
                       rep(NA, length(unique(df.tmp$x.axis.Var))),
                       rep(&amp;quot;black&amp;quot;, length(unique(df.tmp$x.axis.Var))-1)
                     )
                   ),
    axis.line = element_line(colour = &amp;quot;#4e4d47&amp;quot;, size = 0.5),
    axis.ticks.length = unit(.15, &amp;quot;cm&amp;quot;),
    axis.title.x =       element_blank(),
    axis.title.y =       element_blank(),
    panel.background =   element_blank(),
    plot.margin =        unit(c(1, 1, 1, 1), &amp;quot;lines&amp;quot;),
    legend.text =        element_text(size = 10, 
                                      color = &amp;quot;#4e4d47&amp;quot;,
                                      face = &amp;quot;bold&amp;quot;,
                                      margin = margin(l = 0.25, unit = &amp;quot;cm&amp;quot;)
                                      ),
    legend.title =       element_blank()
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the final plot:
&lt;img src=&#34;waterfall_ggplot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shiny App with Modal, Modules and jQuery</title>
      <link>/project/shiny-modal-modules-jquery/</link>
      <pubDate>Tue, 24 Jul 2018 12:00:00 -0400</pubDate>
      
      <guid>/project/shiny-modal-modules-jquery/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Shiny App to Compare Images</title>
      <link>/project/shiny-compare-images/</link>
      <pubDate>Tue, 24 Jul 2018 10:00:00 -0400</pubDate>
      
      <guid>/project/shiny-compare-images/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 -0400</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;I value your privacy, so I do not track your user data. I also do not use any piece of software that does that (to the best of my knowledge).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0500</pubDate>
      
      <guid>/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  
Click on the **Slides** button above to view the built-in slides feature.

&lt;/div&gt;

&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;em&gt;Slides&lt;/em&gt; feature and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CNI National Economy Award (Prêmio CNI de Economia)</title>
      <link>/awards/premio-cni/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 -0500</pubDate>
      
      <guid>/awards/premio-cni/</guid>
      <description>&lt;p&gt;Issued by the Brazilian National Confederation of Industry with the support from the Brazilian Association of Graduate Centers in Economics.&lt;/p&gt;

&lt;p&gt;Award granted to the paper: ``Impacts of the Brazilian Sector Funds on industrial firms’ R&amp;amp;D inputs and outputs: New perspectives using a dose-response function&amp;rdquo; (original title: Impactos dos Fundos Setoriais nas Empresas: Novas Perspectivas a partir da Função Dose-Resposta).&lt;/p&gt;

&lt;p&gt;Click &lt;a href=&#34;https://goo.gl/lnuSpe&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; for the full paper in English and &lt;a href=&#34;http://admin.cni.org.br/portal/data/pages/FF80808121B629230121B62A73BB04BC.htm&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; for more information about the award.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Impacts of the Brazilian Science and Technology Sector Funds on industrial firms’ R&amp;D inputs and outputs: New perspectives using a dose-response function</title>
      <link>/publication/dose-response-function/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 -0500</pubDate>
      
      <guid>/publication/dose-response-function/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Demand for air ticket in the Brazilian economy: a co-integration analysis (original title: Demanda por ticket aéreo na economia brasileira: uma análise de co-integração).</title>
      <link>/publication/airticket/</link>
      <pubDate>Fri, 01 Jul 2011 00:00:00 -0400</pubDate>
      
      <guid>/publication/airticket/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Counter-cyclical policies in the automobile industry: a co-integration analysis of the impacts of IPI reduction on vehicle sales (original title: Políticas anticíclicas na indústria automobilística: uma análise de co-integração dos impactos da redução do IPI sobre as vendas de veículos).</title>
      <link>/publication/vehicle-sales/</link>
      <pubDate>Fri, 01 Oct 2010 00:00:00 -0400</pubDate>
      
      <guid>/publication/vehicle-sales/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
